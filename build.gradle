plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'net.researchgate.release' version '3.0.2'
	id 'checkstyle'
}

ext {
	checkstyleVersion = '10.12.2'
}

group = 'uk.gov.laa'
sourceCompatibility = '17'

release {
	tagTemplate = '$name-$version'
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom(testImplementation)
	integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

def gitPackageUser
def gitPackageKey

if (file('secrets.gradle').exists()) {
	// Apply secrets from 'secrets.gradle'
	apply from: 'secrets.gradle'
	gitPackageUser = project.ext.gitPackageUser
	gitPackageKey = project.ext.gitPackageKey
} else {
	gitPackageUser = 'laa-ccms-caab-ui'
	gitPackageKey = System.getenv('GIT_PACKAGE_KEY')
}

repositories {
	mavenCentral()

	// Latest version of saml requires this
	maven { url "https://build.shibboleth.net/nexus/content/repositories/releases/" }

	// Define the common configuration block for GitHub repositories
	def githubRepoConfig = { repoUrl ->
		maven {
			url repoUrl
			credentials {
				username = gitPackageUser
				password = gitPackageKey
			}
		}
	}

	// Configure repositories using the defined GitHub config
	githubRepoConfig('https://maven.pkg.github.com/ministryofjustice/laa-ccms-data-api')
	githubRepoConfig('https://maven.pkg.github.com/ministryofjustice/laa-ccms-caab-api')
	githubRepoConfig('https://maven.pkg.github.com/ministryofjustice/laa-ccms-soa-gateway-api')
}

dependencies {
	implementation 'uk.gov.laa.ccms.data:data-api:0.0.2'
	implementation 'uk.gov.laa.ccms.soa.gateway:soa-gateway-api:0.0.5'
	implementation 'uk.gov.laa.ccms.caab:caab-api:0.0.5'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	//Starters
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.data:spring-data-commons:3.1.3'

	implementation 'org.springframework.boot:spring-boot-devtools'

	//SAML security
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.security:spring-security-saml2-service-provider'
	implementation "org.opensaml:opensaml-core:4.3.0"
	implementation "org.opensaml:opensaml-saml-api:4.3.0"
	implementation "org.opensaml:opensaml-saml-impl:4.3.0"



	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:5.5.0'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test:3.5.9'

	integrationTestImplementation "com.github.tomakehurst:wiremock:3.0.1"

}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	description = "Run integration tests"
	group = "verification"
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/CaabApplication.class', '**/SecurityConfiguration.class'])
		}))
	}

	dependsOn tasks['test']
}

jacocoTestCoverageVerification {

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/CaabApplication.class', '**/SecurityConfiguration.class'])
		}))
	}


	violationRules {
		rule {
			limit {
				minimum = 0.80  // You can define your required coverage ratio here.
			}
		}
	}

	dependsOn tasks['test']
}

checkstyle {
	maxWarnings = 0
	toolVersion = "${checkstyleVersion}"
	sourceSets = [sourceSets.main]
	showViolations = true
}

